<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>logback-demo</contextName>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </layout>
    </appender>

    <logger name="com.dominator" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <logger name="jdbc.connection" level="OFF" />
    <logger name="jdbc.audit" level="OFF" />
    <logger name="jdbc.resultset" level="OFF" />
    <logger name="jdbc.sqltiming" level="OFF" />
    <logger name="jdbc.sqlonly" level="info">
        <appender-ref ref="STDOUT" />
    </logger>


    <!--&lt;!&ndash;输出到控制台 ConsoleAppender&ndash;&gt;-->
    <!--<appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--&lt;!&ndash;展示格式 layout&ndash;&gt;-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
            <!--<pattern>-->
                <!--<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <!--</pattern>-->
        <!--</layout>-->
        <!--&lt;!&ndash;-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
             <!--<level>ERROR</level>-->
        <!--</filter>-->
         <!--&ndash;&gt;-->
    <!--</appender>-->

    <!--&lt;!&ndash;指定最基础的日志输出级别&ndash;&gt;-->
    <!--<root level="INFO">-->
        <!--&lt;!&ndash;appender将会添加到这个loger&ndash;&gt;-->
        <!--<appender-ref ref="consoleLog1"/>-->
        <!--&lt;!&ndash;<appender-ref ref="consoleLog2"/>&ndash;&gt;-->
    <!--</root>-->

    <!--<appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash;如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，-->
        <!--所以我们使用下面的策略，可以避免输出 Error 的日志&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--&lt;!&ndash;过滤 Error&ndash;&gt;-->
            <!--<level>ERROR</level>-->
            <!--&lt;!&ndash;匹配到就禁止&ndash;&gt;-->
            <!--<onMatch>DENY</onMatch>-->
            <!--&lt;!&ndash;没有匹配到就允许&ndash;&gt;-->
            <!--<onMismatch>ACCEPT</onMismatch>-->
        <!--</filter>-->
        <!--&lt;!&ndash;日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则-->
            <!--如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天-->
            <!--的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash;<File>${logback.logdir}/info.${logback.appname}.log</File>&ndash;&gt;-->
        <!--&lt;!&ndash;滚动策略，按照时间滚动 TimeBasedRollingPolicy&ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;-->
            <!--<FileNamePattern>/var/log/pms/%d{yyyy-MM-dd}-info.log</FileNamePattern>-->
            <!--&lt;!&ndash;只保留最近90天的日志&ndash;&gt;-->
            <!--<maxHistory>30</maxHistory>-->
            <!--&lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;-->
            <!--&lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash;日志输出编码格式化&ndash;&gt;-->
        <!--<encoder>-->
            <!--<charset>UTF-8</charset>-->
            <!--<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->
    <!--<root level="INFO">-->
        <!--&lt;!&ndash;appender将会添加到这个loger&ndash;&gt;-->
        <!--<appender-ref ref="fileInfoLog"/>-->
        <!--&lt;!&ndash;<appender-ref ref="consoleLog2"/>&ndash;&gt;-->
    <!--</root>-->

    <!--<appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash;如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>error</level>-->
        <!--</filter>-->
        <!--&lt;!&ndash;日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则-->
            <!--如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天-->
            <!--的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash;<File>${logback.logdir}/error.${logback.appname}.log</File>&ndash;&gt;-->
        <!--&lt;!&ndash;滚动策略，按照时间滚动 TimeBasedRollingPolicy&ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;-->
            <!--<FileNamePattern>/var/log/pms/%d{yyyy-MM-dd}-error.log</FileNamePattern>-->
            <!--&lt;!&ndash;只保留最近90天的日志&ndash;&gt;-->
            <!--<maxHistory>30</maxHistory>-->
            <!--&lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;-->
            <!--&lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash;日志输出编码格式化&ndash;&gt;-->
        <!--<encoder>-->
            <!--<charset>UTF-8</charset>-->
            <!--<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->
    <!--<root level="INFO">-->
        <!--&lt;!&ndash;appender将会添加到这个loger&ndash;&gt;-->
        <!--<appender-ref ref="fileErrorLog"/>-->
        <!--&lt;!&ndash;<appender-ref ref="consoleLog2"/>&ndash;&gt;-->
    <!--</root>-->
</configuration>